#!/usr/bin/env python

import sys, signal, os, locale, gettext

sys.path.insert(1, '@pyexecdir@')
sys.path.insert(1, '@pythondir@')

from gi.repository import Gio, Gtk
import birdieapp

localedir='@localedir@'
srcdir = os.path.abspath(os.path.join(os.path.dirname(birdieapp.__file__), '..'))
if os.path.exists(os.path.join(srcdir, 'birdie.doap')):
    print('Running from source tree, using local files')
    pkgdatadir = os.path.join(srcdir, 'data')
    libgd_libdir = os.path.join(srcdir, 'libgd', '.libs')
    libgd_typelibdir = os.path.join(srcdir, 'libgd')
    if not os.environ.get('GSETTINGS_SCHEMA_DIR'):
        os.environ['GSETTINGS_SCHEMA_DIR'] = pkgdatadir
else:
    pkgdatadir = '@pkgdatadir@'
    libgd_libdir = '@pkglibdir@'
    libgd_typelibdir = '@pkglibdir@/girepository-1.0'

from birdieapp.application import Application

def install_excepthook():
    """ Make sure we exit when an unhandled exception occurs. """
    from gi.repository import Gtk
    """old_hook = sys.excepthook
    def new_hook(etype, evalue, etb):
        old_hook(etype, evalue, etb)
        while Gtk.main_level():
            Gtk.main_quit()
        sys.exit()
    sys.excepthook = new_hook"""
    pass

if __name__ == "__main__":
    install_excepthook()

    locale.bindtextdomain('birdie', localedir)
    locale.textdomain('birdie')
    gettext.bindtextdomain('birdie', localedir)
    gettext.textdomain('birdie')

    resource = Gio.resource_load(os.path.join(pkgdatadir, 'birdie.gresource'))
    Gio.Resource._register(resource)

    app = Application()
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    exit_status = app.run(sys.argv)
    sys.exit(exit_status)
